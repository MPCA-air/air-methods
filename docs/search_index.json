[
["get-data.html", " Get data 2.1 Air monitoring 2.2 Health and standards 2.3 Air modeling 2.4 Context", " Get data This section describes how to download air monitoring and modeling data. Air monitoring data Final data 2.1.1 EPA AQS Database 2.1.2 EPA AQS Datamart (RQAMD Package) 2.1.7 MPCA LIMS data via Tableau 2.1.9 MPCA WAIR Database Preliminary data 2.1.3 AirNow: Current AQI observations 2.1.8 AirVision: Continuous data Air Monitoring Site Information 2.1.4 WAIR Site Table 2.1.5 AirNow: Active AQI monitors 2.1.6 EPA Google Earth Site Explorer Summarized air monitoring results External Data Explorers 2.1.10 Air Toxics Data Explorer 2.1.11 Criteria Pollutant Data Explorer 2.1.12 Air Quality Index Summary Reports 2.1.13 Air Monitoring for PAHs Internal Data Explorers 2.1.14 MPCA Tableau Server Health benchmarks and air quality standards Air toxics 2.2.1 Inhalation health benchmarks Criteria pollutants 2.2.2 Air Quality Standards (NAAQs and MAAQS) Air modeling Modeling results 2.3.1 NATA 2.3.2 MNRISKS 2.3.3 Downscaler for Ozone and PM2.5 2.3.4 CMAQ Context Emissions 2.4.1 MN Emissions Inventory 2.4.2 EPA’s NEI 2.4.3 Facility locations Meteorology and Climate 2.4.4 Weather observations 2.4.5 HYSPLIT wind trajectories Geography and Census data 2.4.6 Land use maps 2.4.7 U.S. Census boundaries 2.4.8 Demographics from American Community Survey (ACS) 2.1 Air monitoring 2.1.1 Retrieving data from AQS The Air Quality System (AQS) contains ambient air pollution data collected by EPA, state, local, and tribal air pollution control agencies from over thousands of monitors. AQS also contains meteorological data, descriptive information about each monitoring station (including its geographic location and its operator), and data quality assurance/quality control information. Registered users can access the AQS database via a web application at https://www.epa.gov/aqs. Raw data extracts can be run using the AMP501 report. The AMP501 provides data in the pipe delimited RD transaction format. 2.1.2 Retrieving data from AQS DataMart The AQS Data Mart provides a convenient API to access air quality data stored in the EPA’s AQS database, [AQS Data Mart] (https://aqs.epa.gov/aqsweb/documents/data_mart_welcome.html) Note: The AQS Data Mart requires a user name and password. The username and password is not the same as your AQS User Account. To request a Data Mart account, follow the instructions on the Data Mart page. The RQAMD package allows users to query the AQS Data Mart in R, see RQAMD on Github. Warning: Data from AQS Data Mart does not include null results. Sample R script Click the button below to view a step by step example. Show R code ##install raqdm package library(devtools) devtools::install_github(&quot;ebailey78/raqdm&quot;) library(raqdm) ##set Data Mart username and password. setAQDMuser(&quot;User Name&quot;,&quot;PW&quot;,save=TRUE) #Note save=TRUE creates a file that stores username and password locally, you will not need to run setuser info each time you load raqdm. setAQDMdefaults(pc=&quot;CRITERIA&quot;, state=&quot;27&quot;, save=TRUE) #Set defaults that are locally stored for queries. This eliminates need to define the data type and state code. ## Single parameter query x &lt;- getAQDMdata(state=&quot;27&quot;,pc=&quot;CRITERIA&quot;,param=&quot;42602&quot;,format=&quot;AQCSV&quot;,bdate=&quot;20140101&quot;,edate=&quot;20141231&quot;,synchronous = FALSE) # Queries Data Mart DataBase aqcsv &lt;- getAQDMrequest(x) # Wait for email confirming file is ready. ## Multiple parameter loops params &lt;- c(&quot;45201&quot;, &quot;42602&quot;, &quot;44201&quot;) #Create a vector with the parameters you are interested in # Use lapply to loop through the params vector, requesting each one from AQDM. A list of requests will be returned to the x variable x &lt;- lapply(params, function(p) { return(getAQDMdata(param=p)) }) # Now loop through the requests to retrieve the data y &lt;- lapply(x, function(r) { return(getAQDMrequest(r)) }) # Use do.call and rbind to combine them into one data.frame d &lt;- do.call(rbind, y) 2.1.3 Current AQI observations Real-time air data for the entire United States is at your finger tips. EPA’s AirNow maintains a publicly accessible folder of current air monitoring data at https://files.airnowtech.org/. Data retrieved from AirNow is preliminary and may change following quality assurance. Sample R script Use the following R code to grab the most recent AQI results for the entire country. Show R code library(dplyr) library(readr) # Connect to AirNow data site #https://files.airnowtech.org/ airnow_link &lt;- paste0(&quot;https://s3-us-west-1.amazonaws.com//files.airnowtech.org/airnow/today/&quot;, &quot;HourlyData_&quot;, format(Sys.time() - 60*75, &quot;%Y%m%d%H&quot;, tz = &quot;GMT&quot;), &quot;.dat&quot;) aqi_now &lt;- read_delim(airnow_link, &quot;|&quot;, col_names = F) #col_types = c(&#39;cccciccdc&#39;)) # Add column names names(aqi_now) &lt;- c(&quot;date&quot;, &quot;time&quot;, &quot;aqsid&quot;, &quot;city&quot;, &quot;local_time&quot;, &quot;parameter&quot;, &quot;units&quot;, &quot;concentration&quot;, &quot;agency&quot;) # Filter to Ozone and PM2.5 results aqi_now &lt;- filter(aqi_now, parameter %in% c(&quot;OZONE&quot;, &quot;PM2.5&quot;)) 2.1.4 WAIR Site information table The WAIR database includes a copy of the EPA site information table, which includes site names and location information. Sample R script Click the button below to view a step by step example. Show R code library(RPostgreSQL) username &lt;- #Add WAIR UserName pass &lt;- #Add WAIR password ## Load the PostgreSQL driver drv &lt;- dbDriver(&quot;PostgreSQL&quot;) ## Open a connection con &lt;- dbConnect(drv, dbname=&quot;wair&quot;,host=&#39;eiger&#39;,user=username,password=pass) sites &lt;- dbGetQuery(con, statement = paste( &quot;SELECT * FROM wair.aqs.site \\ &quot; )); dbDisconnect(con) ## Closes the connection dbUnloadDriver(drv) ## Frees all the resources on the driver 2.1.5 AirNow:Active AQI monitors A map of MPCA’s air monitoring network is available online at Minnesota air monitoring sites. A list of all active AQI monitoring locations around the United States are published to AirNow in the monitoring_site_locations.dat file. Sample R script Click the button below to view a step by step example. Show R code library(dplyr) library(readr) # Connect to AirNow data site #https://files.airnowtech.org/ airnow_link &lt;- paste0(&quot;https://s3-us-west-1.amazonaws.com//files.airnowtech.org/airnow/today/&quot;, &quot;monitoring_site_locations.dat&quot;) aqi_sites &lt;- read_delim(airnow_link, &quot;|&quot;, col_names = F) # Drop empty columns aqi_sites &lt;- aqi_sites[ , -c(14:16,22:23)] # Add column names names(aqi_sites) &lt;- c(&quot;aqsid&quot;, &quot;parameter&quot;, &quot;local_id&quot;, &quot;name&quot;, &quot;status&quot;, &quot;state_region&quot;, &quot;agency&quot;, &quot;epa_region&quot;, &quot;lat&quot;, &quot;long&quot;, &quot;elevation&quot;, &quot;local_time&quot;, &quot;country&quot;, &quot;city&quot;, &quot;state_fips&quot;, &quot;state&quot;, &quot;county_fips&quot;, &quot;county&quot;) # Filter to Minnesota sites aqi_sites &lt;- filter(aqi_sites, state_fips %in% c(27)) 2.1.6 EPA Google Earth Site Maps The AirData Air Quality Monitors app is a mapping application available on the web and on mobile devices that displays monitor locations and monitor-specific information. It also allows the querying and downloading of data daily and annual summary data. Static KMZ files are also available to download. https://www.epa.gov/outdoor-air-quality-data/interactive-map-air-quality-monitors 2.1.7 Retrieving data from LIMS via Tableau The LIMS database is the primary data warehouse for AQ monitoring activities. The LIMS system is being retired and replaced. To ease data accessibilty during this transition LIMS data are available for download via an internal Tableau workbook at http://tableau.pca.state.mn.us/#/workbooks/3342 Sample R script The following function reads LIMS data from Tableau. All inputs must be provided. The inputs are: Sites: Integer vector representing site numbers (no state code, county code, or POC) Parameter_list: Integer vector representing parameters to extract. Start_date: Character string of date in YYYY-MM-DD format (or other format recognized by ymd()) End_date: Character string of date in YYYY-MM-DD format (or other format recognized by ymd()) Pollutant_Groups: Character vector of pollutant groups to extract. Air toxics include “metals (TSP)”, “VOCs”, “carbonyls”. Show R code read_AT_data_tableau = function(Sites, Parameter_list, Start_date = &quot;2016-01-01&quot;, End_date = &quot;2016-03-31&quot;, Pollutant_Groups = c(&quot;metals (TSP)&quot;, &quot;VOCs&quot;, &quot;carbonyls&quot;)) { sample_calendar &lt;- function(start = &quot;2016-01-01&quot;, end = &quot;2016-12-31&quot;, day_interval = 6, type = &quot;air_toxics&quot;) { library(lubridate) # Convert &#39;start&#39; and &#39;end&#39; to class date start &lt;- ymd(start) end &lt;- ymd(end) # Set official start date to selected EPA calendar if(type == &quot;air_toxics&quot;) { epa_start &lt;- ymd(&quot;1989-12-24&quot;) } else { epa_start &lt;- start } # Create full table of sampling dates calendar &lt;- seq(from = epa_start, to = end, by = paste(day_interval, &quot;days&quot;)) # Subset to user&#39;s date range calendar &lt;- calendar[calendar &gt;= start &amp; calendar &lt;= end] return(calendar) } # Generate air toxics sampling dates Dates = sample_calendar(Start_date, End_date) # Break dates into quarters Quarters = quarter(Dates, with_year = T) library(tidyverse) # Convert fields to Tableau url format base_url = &quot;http://tableau.pca.state.mn.us/views/exportDailyData/Datawithnullcodes.csv?&quot; Sites = paste(paste0(Sites,&quot;-1&quot;, collapse = &quot;,&quot;), paste0(Sites,&quot;-2&quot;, collapse = &quot;,&quot;), sep = &quot;,&quot;) Testnames = Pollutant_Groups %&gt;% url_encode() %&gt;% paste0(collapse = &quot;,&quot;) Analytes = url_encode(Analytes) %&gt;% gsub(&quot;%2c&quot;, &quot;%5C%2C&quot;,.) %&gt;% paste0(collapse = &quot;,&quot;) Parameter_list = paste0(Parameter_list, collapse = &quot;,&quot;) AT_data = NULL for (i in unique(Quarters) ) { Dates2 = paste0(Dates[Quarters == i], collapse = &quot;,&quot;) #Construct url for Tableau url = paste0(base_url, &quot;site%20and%20poc=&quot;, Sites, &quot;&amp;TESTNAME=&quot;, Testnames, &quot;&amp;ANALYTES_ANALYTE=&quot;, Analytes, &quot;&amp;PARAMCODE=&quot;, Parameter_list, &quot;&amp;RUNDATE=&quot;, Dates2 ) # Read data from Tableau server AT_data = bind_rows(AT_data, read_csv(url, col_types = &quot;ccccicccd&quot;) ) } return(AT_data) } 2.1.8 Retrieving continuous data from AirVision AirVision is the data acquistion and temporary storage database for continuous air monitoring data. Data collected in AirVision is transfered to LIMs and AQS for final data storage. If you need the most recent monitoring observations and would like to access continuous data before it has been transfered to the final data repository you can run reports from AirVision. To run reports, the AirVision client must be installed on your computer and you need a user account. Contact the Air Monitoring Supervisor to request credentials. Alternatively, an AirVision administator can create a report task that will generate a data report and send it to a specified location (FTP site or e-mail). 2.1.9 Retrieving data from MPCA WAIR database The WAIR database provides a queryable local copy of select air quality data extracted from multiple data sources. This database is managed by Margaret McCourtney.Contact Margaret to request login credentials. See WAIR Data Dictionary for available data tables. Use the following code to query WAIR using the R package dplyr. Show R code ################################################################################################ ## This script loads the library and driver and connects to WAIR. A dplyr query extracts ## data from the database into a format specified by Cassie McMahon for calculating ## OZONE DESIGN VALUES ## ## Note: WAIR does not contain values for SamplingFrequency and MonitorProtocolID ## ## Note: dplyr does not have a command to disconnect from the database. Connection will ## terminate upon quitting R. Please do not keep (many) connections open for long periods of ## time. ################################################################################################ ## Load the package library(dplyr) ## Open a connection to the database WAIR, schema AQS ## my_wair &lt;- src_postgres(dbname = &#39;wair&#39;, host = &quot;eiger&quot;, user = &quot;username&quot;, password = &quot;password&quot;, options = &quot;-c search_path=aqs&quot;) ## Reference a table, or two if combining, in the database (e.g. aqs.monitor &amp; aqs.obs_value) ## ## Select columns and filter by row ## #aqs.monitor table in WAIR ## my_monitor &lt;- tbl(my_wair, &quot;monitor&quot;) %&gt;% select(id_mon:poc_code) %&gt;% filter(stateid==27 &amp;&amp; parm_code == 44201) #aqs.obs_value table in WAIR ## my_obs &lt;- tbl(my_wair, &quot;obs_value&quot;) %&gt;% filter(parm_code == 44201 &amp;&amp; between(sampldate, &quot;2014-06-01&quot;, &quot;2014-06-07&quot;)) %&gt;% select(id_mon, dur_code, unitid, method_code, sampldate, startime, value, nulldata, qual_code) ## Combine monitor data with observations my_mn_o3 &lt;- inner_join(my_monitor, my_obs, type = &quot;inner&quot;, by = c(&quot;id_mon&quot;)) ## Collect data into a dataframe or table my_mn_o3_df &lt;- collect(my_mn_o3) %&gt;% arrange(stateid, cntyid, siteid, parm_code, # Arrange combined data in specified order poc_code, dur_code, unitid, method_code, sampldate, startime, value, nulldata, qual_code) ## head(my_mn_o3_df) Use the following code to query WAIR using the package RPostgrSQL. Show R code ################################################################################################ ## This script loads the library and driver and connects to WAIR. A PostgrSQL query extracts ## data from the database into a format specified by Cassie McMahon for calculating ## OZONE DESIGN VALUES ## ## Please disconnect from database and unload the driver before proceeding with analysis of ## the data in your dataframe. ## ## Cassie&#39;s headings ## &quot;State.Code&quot;, &quot;County.Code&quot;, &quot;Site.ID&quot;, &quot;Parameter&quot;, &quot;POC&quot;, &quot;Sample.Duration&quot;, &quot;Unit&quot;, ## &quot;Method&quot;, &quot;Date&quot;, &quot;Start.Time&quot;, &quot;Sample.Value&quot;, &quot;NullDataCode&quot;, &quot;SamplingFrequency&quot;, ## &quot;MonitorProtocolID&quot;, &quot;Qual1&quot; ## Note: WAIR does not contain values for SamplingFrequency and MonitorProtocolID ## ################################################################################################ ## call the library library(RPostgreSQL) ## load the PostgreSQL driver drv &lt;- dbDriver(&quot;PostgreSQL&quot;) ## Open a connection con &lt;- dbConnect(drv, dbname = &quot;wair&quot;, host = &#39;eiger&#39;, user = &#39;username&#39;, password = &#39;password&#39;) #***************************** all in 1 step *************************************************** dframe &lt;- dbGetQuery(con, statement = paste( ################ insert SQL here ###################### &quot;SELECT m.stateid AS state_code,\\ m.cntyid AS county_code,\\ m.siteid AS site_id,\\ m.parm_code AS parameter,\\ m.poc_code AS poc,\\ o.dur_code AS sample_duration,\\ o.unitid AS unit,\\ o.method_code AS method,\\ o.sampldate AS date,\\ o.startime AS start_time,\\ o.value AS sample_value,\\ o.nulldata AS nulldatacode,\\ NULL AS sampling_frequency,\\ NULL AS monitor_protocol_id,\\ o.qual_code\\ FROM aqs.monitor m \\ JOIN aqs.obs_value o \\ ON m.id_mon = o.id_mon \\ WHERE m.stateid = &#39;27&#39; \\ AND m.parm_code = &#39;44201&#39; \\ AND o.sampldate BETWEEN &#39;2014-06-01&#39; AND &#39;2014-06-07&#39;\\ &quot; ######################################################## )); #*********************************************************************************************** ## Closes the connection dbDisconnect(con) ## Frees all the resources on the driver dbUnloadDriver(drv) 2.1.10 Air toxics Data Explorer View and download summarized air toxics monitoring data results from the online Air Toxics Data Explorer. 2.1.11 Criteria Pollutant Data Explorer View and download MPCA calculated annual criteria pollutant design values from the online Criteria Pollutant Data Explorer (https://www.pca.state.mn.us/air/criteria-pollutant-data-explorer). 2.1.12 Air Quality Index Summary Reports View and download annual AQI Summary Reports (based on final montiroing data) from the online Air Quality Index Data Explorer. 2.1.13 Air Monitoring for PAHs View and download PAH monitoring results from the community and facility based special projects online at Air Monitoring for PAHs. 2.1.14 Internal Data Explorers Not all data analysis projects are ready or intended for external audiences. You can find a variety of analzyed monitoring results on the internal Tableau Server. Air Data Analysis Air Modeling and Risk Evaluation 2.2 Health and standards 2.2.1 Inhalation health benchmarks (IHBs) The inhalation health benchmarks used by MPCA are available on the web in these formats: Web table: https://public.tableau.com/profile/mpca.data.services#!/vizhome/Airtoxicityvalues/Airtoxicityvalues Excel: https://www.pca.state.mn.us/sites/default/files/aq9-22.xlsm CSV: https://raw.githubusercontent.com/MPCA-air/health-values/master/Inhalation_Health_Benchmarks(IHBs).csv Use the following R code to fetch the most recent inhalation health benchmarks and references used by MPCA. Show R code library(readr) url &lt;- &quot;https://raw.githubusercontent.com/MPCA-air/health-values/master/Inhalation_Health_Benchmarks(IHBs).csv&quot; ihbs &lt;- read_csv(url) 2.2.2 Air Quality Standards (NAAQS and MAAQS) Criteria air pollutants including: particulate (TSP, PM10, PM2.5), ozone, lead, sulfur dioxide, nitrogen dioxide, and carbon monoxide are regulated via ambient air quality standards. Ambient air quality standards are set at the national (NAAQS) and state (MAAQS) level. NAAQS The Clean Air Act, which was last amended in 1990, requires EPA to set National Ambient Air Quality Standards (40 CFR part 50) for pollutants considered harmful to public health and the environment. The Clean Air Act identifies two types of national ambient air quality standards. Primary standards provide public health protection, including protecting the health of “sensitive” populations such as asthmatics, children, and the elderly. Secondary standards provide public welfare protection, including protection against decreased visibility and damage to animals, crops, vegetation, and buildings. A summary of current NAAQS is available on EPA’s website: https://www.epa.gov/criteria-air-pollutants/naaqs-table When calculating NAAQS design values, analysts must follow the procedures defined in the pollutant specific appendices to 40 CFR 50. In August each year, EPA posts official design values here: https://www.epa.gov/air-trends/air-quality-design-values MAAQS Minnesota Ambient Air Quality Standards (MAAQS) are established in Minnesota Administrative Rules 7009. In most cases, the MAAQS are the same as the NAAQS. The MAAQS also include standards for two pollutants that are not covered by the NAAQS: TSP and hydrogen sulfide. The MAAQS were last updated in January 2017. When calculating MAAQS design values: If MAAQS = NAAQS, use methods described in appendices to 40 CFR 50. If MAAQS = revoked NAAQS, use methods described in archived appendices to 40 CFR 50. For MAAQS without a NAAQS, such as H2S, use the “Form of the standard” language to guide your calculations. 2.3 Air modeling 2.3.1 NATA modeling The National Air Toxics Assessment is a nationwide air modeling effort to provide air concentrations and risks for all U.S. census tracts. These results may be pulled from a map project or data tables at NATA. After each inventory is completed the Minnesota statewide cumulative air pollution model is compared to these results. 2.3.2 MNRISKS statewide risk modeling MNRISKS is the statewide cumulative air pollution model that is produced by MPCA every three years with the air toxics emissions inventory publication. The model itself produces point estimates for air concentrations and potential human health risks for hundreds of air pollutants across Minnesota. The model also incorporates a date and transport component that produces multi-pathway risk results. Census block group averaged results are available on MPCA’s Air modeling and human health webpage. 2.3.3 Downscaler modeling results for Ozone and PM2.5 Downscaled data (a blend of modeling and monitoring results) are provided by the CDC in cooperation with the EPA for the pollutants ozone and PM-2.5. Daily predicitons are available for each Census tract throughout the country for the years 2001 to 2013. CDC information about this platform is available online at https://ephtracking.cdc.gov/showAirData.action. Data from this platform can be downloaded from the EPA at https://www.epa.gov/air-research/downscaler-model-predicting-daily-air-pollution. Downloaded data filtered to Minnesota results is available internally in the folder: X:\\Programs\\Air_Quality_Programs\\Air Monitoring Data and Risks\\6 Air Data\\EPA Downscaler Modeling. 2.3.4 CMAQ Ozone modeling The Community Multiscale Air Quality Modeling System (CMAQ) is defined by EPA as: an active open-source project of the EPA that consists of a suite of programs for conducting air quality model simulations. CMAQ combines current knowledge in atmospheric science and air quality modeling, and an open-source framework to deliver fast, technically sound estimates of ozone, particulates, air toxics and acids deposition. The information and data from this platform can be found at the following website CMAQ. 2.4 Context 2.4.1 MN Emissions Inventory Every year all facilities (stationary point sources) report criteria pollutant emissions and every three years facilities report air toxics emissions. The EPA and the state of Minnesota emissions inventory team also calculate and report emissions for all other types of emissions sources such as mobile, non-road mobile, and area sources. These non-point emissions are reported every three years with the air toxics emissions. The Minnesota emission inventory is the foundation of MNRISKS. These emissions levels are reported in several data tools on the MPCA website. Their data and the visualization tools can be found on the following website https://www.pca.state.mn.us/air/emissions-data. 2.4.2 EPA’s NEI The National Emissions Inventory (NEI) provides air toxics and criteria and air toxic pollutant emissions for the entire U.S. on the same schedule as described in the Minnesota Emissions Inventory section. This information can be found at the following website https://www.epa.gov/air-emissions-inventories/national-emissions-inventory-nei. 2.4.3 Facility locations The most recent compilation of facility coordinates was performed for the 2017 emission inventory. This data is available in the INV_SOURCES table found in the RAPIDS schema of MPCA’s DELTA database. Use the following code to load the current facility coordinates. Show R code # This script connects to the MPCA database DELTA. # A dplyr query collects source coordinates from the RAPIDS schema. # Load packages library(dplyr) library(RODBC) library(readr) You can view available database connections in R using the function odbcDataSources(). odbcDataSources() ## dBASE Files ## &quot;Microsoft Access dBASE Driver (*.dbf, *.ndx, *.mdx)&quot; ## Excel Files ## &quot;Microsoft Excel Driver (*.xls, *.xlsx, *.xlsm, *.xlsb)&quot; ## MS Access Database ## &quot;Microsoft Access Driver (*.mdb, *.accdb)&quot; ## LakesXMLDataSource ## &quot;CR ODBC XML Driver 4.20&quot; ## PostgreSQL35W ## &quot;PostgreSQL Unicode(x64)&quot; ## deltaw ## &quot;Oracle in OraClient11g_home2&quot; ## Amazon Redshift ODBC DSN ## &quot;Amazon Redshift (x64)&quot; To connect to deltaw, use the function odbcConnect(). # Load credentials credentials &lt;- read_csv(&quot;X:/Agency_Files/Outcomes/Risk_Eval_Air_Mod/_Air_Risk_Evaluation/R/R_Camp/Student Folder/credentials.csv&quot;) user &lt;- credentials$delta_user password &lt;- credentials$delta_pwd # Alternatively, use your own #user &lt;- &quot;ta*******&quot; #password &lt;- &quot;da**_*******&quot; # Connect to DELTA deltaw &lt;- odbcConnect(&quot;deltaw&quot;, uid = user, pwd = password, believeNRows = FALSE) # Show all tables in RAPIDS schema rapids_tbls &lt;- sqlTables(deltaw, tableType = &quot;TABLE&quot;, schema = &quot;RAPIDS&quot;) head(rapids_tbls) ## TABLE_CAT TABLE_SCHEM TABLE_NAME TABLE_TYPE REMARKS ## 1 &lt;NA&gt; RAPIDS GEO_ACTIVITIES TABLE &lt;NA&gt; ## 2 &lt;NA&gt; RAPIDS GEO_COUNTIES TABLE &lt;NA&gt; ## 3 &lt;NA&gt; RAPIDS GEO_NATIONS TABLE &lt;NA&gt; ## 4 &lt;NA&gt; RAPIDS GEO_REGIONS TABLE &lt;NA&gt; ## 5 &lt;NA&gt; RAPIDS GEO_REGION_MEMBERS TABLE &lt;NA&gt; ## 6 &lt;NA&gt; RAPIDS GEO_STATES TABLE &lt;NA&gt; # Get inventory year codes inv_codes &lt;- sqlQuery(deltaw, &quot;SELECT * FROM RAPIDS.INV_INVENTORIES&quot;, max = 100, stringsAsFactors = F) # Get code for 2017 inv_id &lt;- filter(inv_codes, INVENTORY_YEAR == 2017)$RID # Get sources for inventory year sources &lt;- sqlQuery(deltaw, paste0(&quot;SELECT * FROM RAPIDS.INV_SOURCES WHERE INVENTORY_RID = &quot;, inv_id), max = 10000, stringsAsFactors = F, as.is = T) # Get source coordinates src_coords &lt;- sqlQuery(deltaw, &quot;SELECT * FROM RAPIDS.INV_COORDINATES&quot;, max = 100000, stringsAsFactors = F, as.is = T) # Join coordinates to sources sources &lt;- left_join(sources, src_coords, by = c(&quot;RID&quot; = &quot;ENTITY_RID&quot;)) # View data sources %&gt;% select(SOURCE_ID, SOURCE_TYPE, SOURCE_NAME, LONGITUDE, LATITUDE) %&gt;% glimpse() ## Rows: 9,412 ## Columns: 5 ## $ SOURCE_ID &lt;chr&gt; &quot;2799000257&quot;, &quot;2703700102&quot;, &quot;2706900014&quot;, &quot;2708900012&quot;,... ## $ SOURCE_TYPE &lt;chr&gt; &quot;POINT&quot;, &quot;POINT&quot;, &quot;POINT&quot;, &quot;POINT&quot;, &quot;POINT&quot;, &quot;POINT&quot;, &quot;... ## $ SOURCE_NAME &lt;chr&gt; &quot;Gravel Products Inc&quot;, &quot;Great Lakes Coca-Cola Distribut... ## $ LONGITUDE &lt;chr&gt; NA, &quot;-93.153&quot;, &quot;-97.0603&quot;, &quot;-96.2385&quot;, &quot;-95.2051&quot;, &quot;-93... ## $ LATITUDE &lt;chr&gt; NA, &quot;44.8567&quot;, &quot;48.9907&quot;, &quot;48.2558&quot;, &quot;47.5853&quot;, &quot;45.111... 2.4.4 Weather observations Historical meteorological observations are available from multiple sources. Raw data An internal Tableau workbook provides raw results for Minnesota meteorological stations: tableau.pca.state.mn.us/#/workbooks/5714. Quality assured data The AQI forecast uses a web API provided by DarkSky for current forecast information and quality assured historical observations. 2.4.5 HYSPLIT wind trajectories Wind trajectories are useful for determining the primary sources contributing to elevated air monitoring results. Trajectory results for the air monitoring netowork are available in WAIR for the years 2007 to 2017. The R package SplitR was used to automate HYSPLIT modeling for each air monitoring location. Use the following code to query WAIR for HYSPLIT results. Show R code # This script connects to the MPCA database WAIR. # A dplyr query collects HYSPLIT modeling results for Anoka Airport. # Load packages library(dplyr) # Open a connection to the database WAIR, schema hys ## my_wair &lt;- src_postgres(dbname = &#39;wair&#39;, host = &quot;eiger&quot;, user = &quot;username&quot;, password = &quot;password&quot;) # Show tables src_tbls(my_wair) %&gt;% sort() # Connect to hys.backtrajectory table ## hys &lt;- tbl(my_wair, &quot;hys.backtrajectory&quot;) hys &lt;- tbl(my_wair, sql(&#39;hys.backtrajectory&#39;)) # Collect data for Anoka Airport after year 2010 ## hys_mpls &lt;- hys %&gt;% select(-the_geom) %&gt;% filter(site_catid == &quot;27-003-1002&quot;, yr &gt; 10) %&gt;% collect(n = 2000) # View data head(hys_mpls) 2.4.6 Land use maps Land use shapefiles are maintained by MPCA GIS technical staff and stored on the agency R-drive at R:\\landuse_landcover. 2.4.7 United States Census boundaries Census boundaries can be loaded into R for mapping air data to Census tracts and block groups. Use the following code to download and map MN boundaries. Show R code # This script downloads shapefiles of Minnesota ## Counties ## Census tracts ## Census Block groups # Load packages library(tigris) # Load boundaries county_bounds &lt;- counties(state = &quot;MN&quot;, cb = T) # Plot plot(county_bounds, col = &quot;steelblue&quot;) Tracts &amp; Block groups tract_bounds &lt;- tracts(state = &quot;MN&quot;, cb = T) bg_bounds &lt;- block_groups(state = &quot;MN&quot;, cb = T) 2.4.8 American Community Survey (ACS) The ACS provides updated demographic statistics used for population estimates and Environmental Justice indicators. Use the following code to download Minnesota ACS results. Show R code # This script downloads American Community Survey (ACS) results for MN # Load packages library(tidycensus) # ACS data requires a Census key # Visit: http://api.census.gov/data/key_signup.html census_api_key(&quot;Your_API_key&quot;) # View all ACS variables acs_variables &lt;- load_variables(2015, &quot;acs5&quot;, cache = TRUE) # Download 5-yr population estimates for 2015 pops_2015 &lt;- get_acs(geography = &quot;tract&quot;, state = &quot;MN&quot;, variables = &quot;B01003_001&quot;, survey = &quot;acs5&quot;, year = 2015) # Download decennial population estimates for 2010 pops_2010 &lt;- get_decennial(geography = &quot;tract&quot;, state = &quot;MN&quot;, variables = &quot;P0080001&quot;, year = 2010) # Download household median income for 2015 med_inc_2015 &lt;- get_acs(geography = &quot;tract&quot;, state = &quot;MN&quot;, variables = &quot;B19013_001&quot;, survey = &quot;acs5&quot;, year = 2015) Back to top "]
]
