[["criteria-pollutant-explorer.html", " Criteria pollutant explorer 15.1 Documentation 15.2 Data Sources 15.3 R scripts 15.4 Tableau", " Criteria pollutant explorer This section describes the methods used to summarize the data shown in MPCAs Criteria pollutant explorer. 15.1 Documentation Methods for calculating NAAQS design values are explained in 40 CFR Part 50. All design values are calculated exactly as written. 15.2 Data Sources Data for all NAAQS Criteria pollutants except lead are in WAIR. Lead data can be accessed via the AQS API. TSP data are currently in StarLIMS. Design Values for PM2.5 and ozone are calculated automatically in WAIR and are in the aqs.vm_pm25_design_value and aqs.vm_ozone_design_value schemas respectively. R script for pulling lead data from AQS API Click the button below for code. Show R code library(data.table) library(tidyverse) library(lubridate) library(glue) library(httr) library(jsonlite) library(htmltools) #Pull data for last year year &lt;- year(today()) - 1 api_email &lt;- &quot;&quot; #your email api_key &lt;- &quot;&quot; #your AQS API key, to create account see: https://aqs.epa.gov/aqsweb/documents/data_api.html#signup col_names &lt;- fread(&quot;X:/Programs/Air_Quality_Programs/Air Monitoring Data and Risks/Air Data Analysis Supporting Information/Information Tables/AQS Raw Data format.csv&quot;) %&gt;% pull(Name) outcomes &lt;- rawToChar(GET( glue( &quot;https://aqs.epa.gov/data/api/transactionsSample/byState?email={api_email}&amp;key={api_key}&amp;param=14129&amp;bdate={year}0101&amp;edate={year}1231&amp;state=27&quot; ), encode = &quot;json&quot; )$content) raw_data &lt;- purrr::map(outcomes, ~ if (str_detect(.x, &#39;\\\\&quot;status\\\\&quot;: \\\\&quot;Success\\\\&quot;&#39;)) fromJSON(.x)$Data else NULL ) %&gt;% rbindlist(fill = T) %&gt;% setkey() pb_data &lt;- mutate(raw_data, TT = &quot;RD&quot;, AC = &quot;I&quot;) %&gt;% select(TT, AC, state_code:uncertainty) %&gt;% set_names(col_names) fwrite(pb_data, glue(&quot;X:/Programs/Air_Quality_Programs/Air Monitoring Data and Risks/6 Air Data/Monitoring Data/Ambient Air Monitoring Data - Test/MPCA Statewide Results/Criteria Pollutants/Lead/Raw Data/Lead Results MN {year}.txt&quot;), sep = &quot;|&quot;) R script for pulling TSP data from Tableau Click the button below for code. Show R code library(tidyverse) library(data.table) library(lubridate) library(RODBC) library(glue) options(scipen = 999) #Years of data you want to pull years &lt;- 2020 #Use the name of your LIMS connection (check odbc data sources) lims_cnx &lt;- odbcConnect(&quot;LIMS32_2&quot;, uid = &quot;kgavin&quot;, pwd = &quot;tableau_12&quot;) #Connect to LIMS colnames &lt;- c(&quot;Transaction Type&quot;, &quot;Action Indicator&quot;, &quot;State Code / Tribal Indicator&quot;, &quot;County Code / Tribal Code&quot;, &quot;Site Number&quot;, &quot;Parameter&quot;, &quot;POC&quot;, &quot;Duration Code&quot;, &quot;Reported Unit&quot;, &quot;Method Code&quot;, &quot;Sample Date&quot;, &quot;Sample Begin Time&quot;, &quot;Reported Sample Value&quot;, &quot;Null Data Code&quot;, &quot;Collection Frequency Code&quot;, &quot;Monitor Protocol ID&quot;, &quot;Qualifier Code - 1&quot;, &quot;Qualifier Code - 2&quot;, &quot;Qualifier Code - 3&quot;, &quot;Qualifier Code - 4&quot;, &quot;Qualifier Code - 5&quot;, &quot;Qualifier Code - 6&quot;, &quot;Qualifier Code - 7&quot;, &quot;Qualifier Code - 8&quot;, &quot;Qualifier Code - 9&quot;, &quot;Qualifier Code - 10&quot;, &quot;Alternate Method Detection Limit&quot;, &quot;Uncertainty Value&quot;) for(i in years){ print(i) data &lt;- sqlQuery(lims_cnx, glue(&quot;SELECT &#39;RD&#39;, &#39;I&#39;, STATECODE, COUNTYCODE, SITECODE, PARAMCODE, POC, SAMPDURATION, UNITCODE, METHODCODE, TO_CHAR(RUNDATE, &#39;YYYYMMDD&#39;), TO_CHAR(RUNDATE, &#39;HH24:MI&#39;), VALUE, NULLDATACODE FROM LIMSSUPER.DAILYDATA WHERE (RUNDATE&gt;={{ts &#39;{i}-01-01 00:00:00&#39;}} AND RUNDATE&lt;{{ts &#39;{i+1}-01-01 00:00:00&#39;}} AND PARAMCODE = &#39;11101&#39;) ORDER BY PARAMCODE, SITEID, RUNDATE&quot;), as.is = T, max = 0 ) if(nrow(data) &gt; 0) { for(j in as.character(1:14)) data[[j]] &lt;- NA data &lt;- set_names(data, colnames) fwrite(data, glue(&quot;X:/Programs/Air_Quality_Programs/Air Monitoring Data and Risks/6 Air Data/Monitoring Data/Ambient Air Monitoring Data - Test/MPCA Statewide Results/Criteria Pollutants/TSP/Raw Data/TSP Results MN {i}.txt&quot;), sep = &quot;|&quot;, col.names = T) } rm(data) } 15.3 R scripts Scripts for calculating NAAQS/MAAQS Design Values are in this folder. The PM2.5 and ozone scripts are deprecated as their Design Values are calculated in WAIR. Once design values have been calculated for all pollutants, use this R script to merge together in one file. Show R code ###Compile all calculted NAAQS DVs into 1 File ### Includes connection to site table and standards library(tidyverse) library(RPostgreSQL) library(data.table) standards_file = &quot;X:/Programs/Air_Quality_Programs/Air Monitoring Data and Risks/Air Data Analysis Supporting Information/Information Tables/AQ Standards.csv&quot; #CSV file with your WAIR &quot;username&quot; and &quot;password&quot; WAIR_credentials_file = &quot;H:/WAIR credentials.csv&quot; WAIR_creds = fread(WAIR_credentials_file) drv &lt;- dbDriver(&quot;PostgreSQL&quot;) con &lt;- dbConnect(drv, dbname = &quot;wair&quot;, host = &#39;eiger&#39;, user = WAIR_creds$username, password = WAIR_creds$password) sites = dbGetQuery(con, statement = paste(&quot;SELECT * FROM aqs.site LEFT JOIN core.counties_contiguousus counties ON aqs.site.stateid = counties.state_fips AND aqs.site.cntyid = counties.cnty_fips LEFT JOIN aqs.city_fips ON aqs.site.stateid = aqs.city_fips.stateid AND aqs.site.cntyid = aqs.city_fips.cntyid AND aqs.site.cityid = aqs.city_fips.cityid&quot;)) %&gt;% setDT() monitor_types = dbGetQuery(con, statement = &quot;SELECT * FROM aqs.monitor_type&quot;) setDT(monitor_types) monitor_types = monitor_types[mon_type %in% c(&quot;SLAMS&quot;, &quot;TRIBAL&quot;, &quot;NON-EPA FEDERAL&quot;, &quot;EPA&quot;) ][, monitor_id := substr(monitor_id, 1, 11) ][, .SD[1, .(mon_type)], by = .(monitor_id)] %&gt;% separate(monitor_id, c(&quot;stateid&quot;, &quot;cntyid&quot;, &quot;siteid&quot;), convert = T) %&gt;% setDT() read_dvs = function() { library(data.table) folder = &quot;X:/Programs/Air_Quality_Programs/Air Monitoring Data and Risks/3 Data Analysis Results/Criteria Pollutant Analysis/DV Indicator Files/DVs - Final&quot; list.files(folder, pattern = &quot;NAAQS Final DV&quot;, full.names = T) %&gt;% lapply(fread) %&gt;% rbindlist(fill = T) } format_addresses = function(addresses) { street_numbers = c(&quot;0th&quot;, &quot;1st&quot;, &quot;2nd&quot;, &quot;3rd&quot;, &quot;4th&quot;, &quot;5th&quot;, &quot;6th&quot;, &quot;7th&quot;, &quot;8th&quot;, &quot;9th&quot;) addresses = str_to_title(addresses) %&gt;% str_replace_all(street_numbers %&gt;% str_to_title() %&gt;% paste(collapse = &quot;|&quot;), street_numbers) return(addresses) } alldvs = read_dvs() alldvs = alldvs[Pollutant %in% c(&quot;PM10&quot;), `:=` (POC = str_sub(AQSID, -1, -1)) ][, `:=`(AQSID_POC = AQSID, AQSID = str_sub(AQSID, 1, 11), stdjoin = paste(Pollutant, Indicator, sep=&quot;: &quot;))] %&gt;% separate(AQSID, c(&quot;stateid&quot;, &quot;cntyid&quot;, &quot;siteid&quot;), remove = F, convert = T) %&gt;% setDT() alldvs[Indicator == &quot;Daily Background Concentration&quot;, DV_Valid := &quot;Yes&quot;] standards=fread(standards_file) alldvs = standards[monitor_types[sites[alldvs, on = c(&quot;stateid&quot;, &quot;cntyid&quot;, &quot;siteid&quot;)], on = c(&quot;stateid&quot;, &quot;cntyid&quot;, &quot;siteid&quot;)], on = &quot;stdjoin&quot;] alldvs = alldvs[!is.na(site_name) &amp; !is.na(mon_type), .( Pollutant, Indicator, PrimaryStandard, SecondaryStandard, Standards_Unit = Units, YearPromulgated, NAAQS = as.logical(NAAQS), MAAQS = as.logical(MAAQS), Active = as.logical(Active), AQSID_POC, DVYear, DV, FinalDV_Units = Units, DV_Valid, Address = format_addresses(street_addr), Cityname = lapply(city_name, function(x) str_split(x, &quot;\\\\ \\\\(RR&quot;)[[1]][1]), County = cnty_name, CountyFIPS = fips, Latitude = lat, Longitude = lon, Siteid = siteid, Sitename = site_name, AveragingTime, ComplianceTest, StandardDescription, DataYears, ChartName = ifelse(is.na(city_name), paste0(site_name, &quot; (&quot;, str_sub(AQSID_POC, 8, 13), &quot;)&quot;), paste0(lapply(city_name, function(x) str_split(x, &quot;\\\\ \\\\(RR&quot;)[[1]][1]), &quot; (&quot;, str_sub(AQSID_POC, 8, 13), &quot;)&quot;) ) )] ##Write files fwrite(alldvs,&quot;X:/Programs/Air_Quality_Programs/Air Monitoring Data and Risks/3 Data Analysis Results/Criteria Pollutant Analysis/DV Indicator Files/DVs - Final/NAAQS_DVs.csv&quot;) 15.4 Tableau The Criteria Data Explorer workbook is located here. Refresh the extract and adjust date ranges then publish to the PCA Tableau server. Email the MPCA Data Desk to update the workbook on the PCA website. "]]
