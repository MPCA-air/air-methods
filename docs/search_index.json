[
["getting-data.html", " Getting data 2.1 Retrieving data from AQS DataMart 2.2 Current AQI observations 2.3 Active AQI monitors 2.4 Retrieving data from MPCA WAIR database", " Getting data This section describes how to access and request air monitoring data. These data include: Air monitoring EPA’s AQS DataMart 2.1 RQAMD Package EPA’s AirNow 2.2 Current AQI observations 2.3 Active AQI monitors MPCA sources 2.4 WAIR Database ?? LIMS data via Tableau ?? Airvision - Hourly data Health and standards Inhalation health benchmarks NAAQs Air modeling NATA Downscaler for Ozone and PM2.5 MNRisks CMAQ Air emissions EPA’s NEI Facility locations Meteorology and Climate Observations HYSPLIT for wind trajectories Forecasts Geography and American Community Survey (ACS) Census ACS Traffic Land use 2.1 Retrieving data from AQS DataMart The AQS Data Mart provides a convenient API to access air quality data stored in the EPA’s AQS database, [AQS Data Mart] (https://aqs.epa.gov/aqsweb/documents/data_mart_welcome.html) Note: The AQS Data Mart requires a user name and password.The username and password is not the same as your AQS User Account.To request a Data Mart account, follow the instructions on the Data Mart page. The RQAMD package allows users to query the AQS Data Mart in R, [RQAMD] (https://github.com/ebailey78/raqdm) Sample R script Click the button below to view a step by step example. Show R code ##install raqdm package library(devtools) devtools::install_github(&quot;ebailey78/raqdm&quot;) require(raqdm) ##set Data Mart username and password. setAQDMuser(&quot;User Name&quot;,&quot;PW&quot;,save=TRUE) #Note save=TRUE creates a file that stores username and password locally, you will not need to run setuser info each time you load raqdm. setAQDMdefaults(pc=&quot;CRITERIA&quot;, state=&quot;27&quot;, save=TRUE) #Set defaults that are locally stored for queries. This eliminates need to define the data type and state code. ##Single Paramteer Query x &lt;- getAQDMdata(state=&quot;27&quot;,pc=&quot;CRITERIA&quot;,param=&quot;42602&quot;,format=&quot;AQCSV&quot;,bdate=&quot;20140101&quot;,edate=&quot;20141231&quot;,synchronous = FALSE) # Queries Data Mart DataBase aqcsv &lt;- getAQDMrequest(x) # Wait for email confirming file is ready. ##Multiple Parameter Loops params &lt;- c(&quot;45201&quot;, &quot;42602&quot;, &quot;44201&quot;) #Create a vector with the parameters you are interested in # Use lapply to loop through the params vector, requesting each one from AQDM. A list of requests will be returned to the x variable x &lt;- lapply(params, function(p) { return(getAQDMdata(param=p)) }) # now loop through the requests to retrieve the data y &lt;- lapply(x, function(r) { return(getAQDMrequest(r)) }) # You could then use do.call and rbind to combine them into one data.frame d &lt;- do.call(rbind, y) 2.2 Current AQI observations Air data for the entire United States is at your finger tips. EPA’s AirNow maintains a publicly accessible folder of current air monitoring data at https://files.airnowtech.org/. Sample R script Use the following R code to grab the most recent AQI results for the entire country.e. Show R code library(dplyr) ## Warning: package &#39;dplyr&#39; was built under R version 3.4.3 ## ## Attaching package: &#39;dplyr&#39; ## The following objects are masked from &#39;package:stats&#39;: ## ## filter, lag ## The following objects are masked from &#39;package:base&#39;: ## ## intersect, setdiff, setequal, union library(readr) # Connect to AirNow data site #https://files.airnowtech.org/ airnow_link &lt;- paste0(&quot;https://s3-us-west-1.amazonaws.com//files.airnowtech.org/airnow/today/&quot;, &quot;HourlyData_&quot;, format(Sys.time() - 60*75, &quot;%Y%m%d%H&quot;, tz = &quot;GMT&quot;), &quot;.dat&quot;) aqi_now &lt;- read_delim(airnow_link, &quot;|&quot;, col_names = F) ## Parsed with column specification: ## cols( ## X1 = col_character(), ## X2 = col_time(format = &quot;&quot;), ## X3 = col_character(), ## X4 = col_character(), ## X5 = col_integer(), ## X6 = col_character(), ## X7 = col_character(), ## X8 = col_double(), ## X9 = col_character() ## ) #col_types = c(&#39;cccciccdc&#39;)) # Add column names names(aqi_now) &lt;- c(&quot;date&quot;, &quot;time&quot;, &quot;aqsid&quot;, &quot;city&quot;, &quot;local_time&quot;, &quot;parameter&quot;, &quot;units&quot;, &quot;concentration&quot;, &quot;agency&quot;) # Filter to Ozone and PM2.5 results aqi_now &lt;- filter(aqi_now, parameter %in% c(&quot;OZONE&quot;, &quot;PM2.5&quot;)) Contributors Dorian Kvale 2.3 Active AQI monitors Current air monitoring locations are published on AirNow to the monitoring_site_locations.dat file. Sample R script Click the button below to view a step by step example. Show R code library(dplyr) library(readr) # Connect to AirNow data site #https://files.airnowtech.org/ airnow_link &lt;- paste0(&quot;https://s3-us-west-1.amazonaws.com//files.airnowtech.org/airnow/today/&quot;, &quot;monitoring_site_locations.dat&quot;) aqi_sites &lt;- read_delim(airnow_link, &quot;|&quot;, col_names = F) ## Parsed with column specification: ## cols( ## .default = col_character(), ## X9 = col_double(), ## X10 = col_double(), ## X11 = col_double(), ## X12 = col_double(), ## X16 = col_integer() ## ) ## See spec(...) for full column specifications. # Drop empty columns aqi_sites &lt;- aqi_sites[ , -c(14:16,22:23)] # Add column names names(aqi_sites) &lt;- c(&quot;aqsid&quot;, &quot;parameter&quot;, &quot;local_id&quot;, &quot;name&quot;, &quot;status&quot;, &quot;state_region&quot;, &quot;agency&quot;, &quot;epa_region&quot;, &quot;lat&quot;, &quot;long&quot;, &quot;elevation&quot;, &quot;local_time&quot;, &quot;country&quot;, &quot;city&quot;, &quot;state_fips&quot;, &quot;state&quot;, &quot;county_fips&quot;, &quot;county&quot;) # Filter to Minnesota sites aqi_sites &lt;- filter(aqi_sites, state_fips %in% c(27)) Contributors Dorian Kvale References 2.4 Retrieving data from MPCA WAIR database The WAIR database provides a queryable local copy of select air quality data extracted multiple data sources. This database is managed by Margaret McCourtney. Contact Margaret to request login credentials. See [WAIR Data Dictionary] (http://rainier.pca.state.mn.us/documentation/DataDictionary/wair/index.html) for available data tables. Use the following code to query WAIR using DPLYR Show R code ################################################################################################ ## This script loads the library and driver and connects to WAIR. A dplyr query extracts ## data from the database into a format specified by Cassie McMahon for calculating ## OZONE DESIGN VALUES ## ## Please disconnect from database before proceeding with analysis of the data in your ## dataframe. ## ## Cassie&#39;s headings ## &quot;State.Code&quot;, &quot;County.Code&quot;, &quot;Site.ID&quot;, &quot;Parameter&quot;, &quot;POC&quot;, &quot;Sample.Duration&quot;, &quot;Unit&quot;, ## &quot;Method&quot;, &quot;Date&quot;, &quot;Start.Time&quot;, &quot;Sample.Value&quot;, &quot;NullDataCode&quot;, &quot;SamplingFrequency&quot;, ## &quot;MonitorProtocolID&quot;, &quot;Qual1&quot; ## Note: WAIR does not contain values for SamplingFrequency and MonitorProtocolID ## ## Note: dplyr does not have a command to disconnect to the database. Connection will ## terminate upon quitting R. So please do not keep (many) connections open for long periods of ## time ################################################################################################ ## Load the library library(dplyr) ## Open a connection to the database WAIR, schema AQS ## my_wair &lt;- src_postgres(dbname=&#39;wair&#39;,host=&quot;eiger&quot;,user=&quot;username&quot;,password=&quot;password&quot;, options=&quot;-c search_path=aqs&quot;) ## Reference a table, or two if combining, in the database (e.g. aqs.monitor &amp; aqs.obs_value) ## ## Select columns and filter by row ## #aqs.monitor table in WAIR ## my_monitor &lt;- filter(select(tbl(my_wair, &quot;monitor&quot;), id_mon:poc_code), stateid==27 &amp;&amp; parm_code==44201) #aqs.obs_value table in WAIR ## my_obs &lt;- filter(select(tbl(my_wair, &quot;obs_value&quot;), id_mon, dur_code, unitid, method_code, sampldate, startime, value, nulldata, qual_code), parm_code==44201 &amp;&amp; between(sampldate, &quot;2014-06-01&quot;, &quot;2014-06-07&quot;)) ## Combine monitor data with observations ## my_mn_o3 &lt;- inner_join(my_monitor, my_obs, type = &quot;inner&quot;, by = c(&quot;id_mon&quot;)) ## Arrange combined data in specified order ## Collect data into a dataframe or table (&#39;collect&#39; only works on dataframe, if don&#39;t &#39;collect&#39; ## will only get first 100,000 rows with tbl_df or tbl_dt) my_mn_o3_df &lt;- collect(my_mn_o3, arrange(my_mn_o3, stateid, cntyid, siteid, parm_code, poc_code, dur_code, unitid, method_code, sampldate, startime, value, nulldata, qual_code)) ## To store data in a data.table instead of data.frame # my_mn_o3_dt &lt;- tbl_dt(my_mn_o3_df) ## To avoid &quot;Variables not shown&quot; options(dplyr.width = Inf) ## head(my_mn_o3_df) Use the following code to query WAIR using RPostgrSQL Show R code ################################################################################################ ## This script loads the library and driver and connects to WAIR. A PostgrSQL query extracts ## data from the database into a format specified by Cassie McMahon for calculating ## OZONE DESIGN VALUES ## ## Please disconnect from database and unload the driver before proceeding with analysis of the data in your dataframe. ## ## Cassie&#39;s headings ## &quot;State.Code&quot;, &quot;County.Code&quot;, &quot;Site.ID&quot;, &quot;Parameter&quot;, &quot;POC&quot;, &quot;Sample.Duration&quot;, &quot;Unit&quot;, ## &quot;Method&quot;, &quot;Date&quot;, &quot;Start.Time&quot;, &quot;Sample.Value&quot;, &quot;NullDataCode&quot;, &quot;SamplingFrequency&quot;, ## &quot;MonitorProtocolID&quot;, &quot;Qual1&quot; ## Note: WAIR does not contain values for SamplingFrequency and MonitorProtocolID ## ################################################################################################ ## call the library library(RPostgreSQL) ## load the PostgreSQL driver drv &lt;- dbDriver(&quot;PostgreSQL&quot;) ## Open a connection con &lt;- dbConnect(drv, dbname=&quot;wair&quot;,host=&#39;eiger&#39;,user=&#39;username&#39;,password=&#39;password&#39;) #***************************** all in 1 step *************************************************** dframe &lt;- dbGetQuery(con, statement = paste( ################ insert SQL here ###################### &quot;SELECT m.stateid AS state_code,\\ m.cntyid AS county_code,\\ m.siteid AS site_id,\\ m.parm_code AS parameter,\\ m.poc_code AS poc,\\ o.dur_code AS sample_duration,\\ o.unitid AS unit,\\ o.method_code AS method,\\ o.sampldate AS date,\\ o.startime AS start_time,\\ o.value AS sample_value,\\ o.nulldata AS nulldatacode,\\ NULL AS sampling_frequency,\\ NULL AS monitor_protocol_id,\\ o.qual_code\\ FROM aqs.monitor m \\ JOIN aqs.obs_value o \\ ON m.id_mon = o.id_mon \\ WHERE m.stateid = &#39;27&#39; \\ AND m.parm_code = &#39;44201&#39; \\ AND o.sampldate BETWEEN &#39;2014-06-01&#39; AND &#39;2014-06-07&#39;\\ &quot; ######################################################## )); #*********************************************************************************************** ## Closes the connection dbDisconnect(con) ## Frees all the resources on the driver dbUnloadDriver(drv) Back to top "]
]
