[
["completeness-checks-dorian-cassie.html", " Completeness checks (Dorian &amp; Cassie) 5.1 Completeness checks", " Completeness checks (Dorian &amp; Cassie) Checking for data completeness before generating summaries ensures that results will be comparable from one year to the next. Without completeness checks, changes in the seasonal coverage from year to year may create the illusion of increasing or decreasing trends. Completeness checks inlcude tests for: Calendar quarter completeness Number of samples required for a season or quarter. Annual completeness Number of samples required for a year. Unique values Number of unique values required. 5.1 Completeness checks Description This section describes completeness guidelines and methods for performing completeness checks. Air toxic reporting guidelines based on MPCA and EPA guidelines Annual results are considered incomplete if any of the following conditions are not met: Annual completeness 75% or more of expected samples collected (rounded up) Calendar quarter completeness 75% or more of expected samples collected (rounded up) Unique values 2 or more unique values Criteria pollutant reporting guidelines Completeness rules for criteria pollutant design values are defined in the Appendices of 40 CFR 50. In general, these rules apply: Annual completeness 75% or more of samples collected Calendar quarter completeness 75% or more of samples collected Recommended steps Based on the monitoring schedule, record the total expected samples for each year and quarter. Air toxics monitors follow a fixed sampling schedule provided by the EPA. (See the Air Toxics Monitoring Calendar) Count the number of valid samples for each year and quarter. Divide the number of valid samples by the number of expected samples. Count the number of unique values for each year. Mark annual results as incomplete if they do not fulfill one of the completeness checks. Example R script Click the button below to view a step by step example of the methods above. Show R code Packages library(tidyverse) Our example data is organized by monitoring site and date. Figure 5.1: Sample data table. Step 1: Find the expected number of samples. Monitors in EPAâ€™s Air Quality System are required to follow the Air Toxics Monitoring Calendar. The sampling schedule for air toxics is generally 1 sample per every 6 days. Depending on the sampling start date and whether it is a leap year or not, the expected number of samples for the year will range from 60 to 61. If you are uncertain about the sampling schedule for your data, consult the lab to confirm the expected number of samples. # Load EPA&#39;s air toxics monitoring schedule schedule &lt;- read_csv() schedule &lt;- schedule %&gt;% mutate(cal_quarter = quarter(Date)) # Count the number of sampling dates for each quarter and year. schedule &lt;- schedule %&gt;% group_by(Year, cal_quarter) %&gt;% summarize(expected_quarter_samples = length(unique(Date))) %&gt;% group_by(Year) %&gt;% mutate(expected_annual_samples = sum(expected_quarter_samples))) Step 2: Count number of valid samples. library(lubridate) # Assign each date to a calendar quarter data &lt;- data %&gt;% mutate(cal_quarter = quarter(Date)) # Count the number of sampling dates for each quarter and year. data &lt;- data %&gt;% group_by(AQSID, POC, Pollutant, CAS, Year, cal_quarter) %&gt;% mutate(valid_quarter_samples = length(unique(Date))) %&gt;% group_by(AQSID, POC, Pollutant, CAS, Year) %&gt;% mutate(valid_annual_samples = length(unique(Date))) Step 3: Divide the number of valid samples by the number of expected samples. # Join expected sample table to data #data &lt;- left_join(data, schedule) # Divide valid samples by expected samples data &lt;- data %&gt;% group_by(AQSID, POC, Pollutant, CAS, Year, cal_quarter) %&gt;% mutate(pct_quarter_samples = valid_quarter_samples / 15) %&gt;% group_by(AQSID, POC, Pollutant, CAS, Year) %&gt;% mutate(pct_annual_samples = valid_annual_samples / 60) Step 4: Count the number of unique values for each year. data &lt;- data %&gt;% group_by(AQSID, POC, Pollutant, CAS, Year) %&gt;% mutate(unique_values = length(unique(Concentration))) Step 5: Mark results as incomplete if they do not fulfill one of the completeness checks. # Set incomplete to zero if any of completeness checks are not met data &lt;- data %&gt;% mutate(incomplete = sum(c(pct_quarter_samples &lt; 0.75, pct_annual_samples &lt; 0.75, unique_values &lt; 2)) &gt; 0) Contributors Dorian Kvale, Cassie McMahon References Appendices of 40 CFR 50 "]
]
