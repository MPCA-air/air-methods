[
["charts.html", " Charts 11.1 Boxplots 11.2 Calendar plots 11.3 Colors and themes 11.4 Pollution roses", " Charts 11.1 Boxplots Dividing by zero is an amazing super power. Unfortunately for you your computer does not have this power. Making a log boxplot with data containing zeros or negative values is problematic. 11.1.1 Log boxplots Coming soon… 11.1.2 Outliers Coming soon… 11.2 Calendar plots The openair package provides a convenient function, calendarPlot, for presenting data in a calendar format. 11.3 Colors and themes R offers a wide variety of color palettes and chart themes to use in your plots. Some color palettes include: Viridis colors Ghibli Movie colors Wes Anderson Movie colors Some chart themes include: hrbrthemes XKCD ggthemes ggpomological ggthemr lato The example below shows a few charts using the ggpomological theme. Show R code A pollutant scatterplot with pomological colors. #devtools::install_github(&quot;gadenbuie/ggpomological&quot;) library(ggpomological) library(tidyverse) # Load air pollution data data &lt;- read_csv(&#39;https://raw.githubusercontent.com/MPCA-air/air-methods/master/airtoxics_data_2009_2013.csv&#39;) names(data) &lt;- c(&quot;aqs_id&quot;, &quot;poc&quot;, &quot;param_code&quot;, &quot;date&quot;, &quot;conc&quot;, &quot;null_code&quot;, &quot;md_limit&quot;, &quot;pollutant&quot;, &quot;year&quot;, &quot;cas&quot;) data &lt;- filter(data, pollutant %in% c(&quot;Formaldehyde&quot;, &quot;Benzene&quot;, &quot;1,3-Butadiene&quot;)) data$pollutant &lt;- factor(data$pollutant, levels = c(&quot;Formaldehyde&quot;, &quot;Benzene&quot;, &quot;1,3-Butadiene&quot;)) # Make scatterplot w/ pomo colors ggplot(data, aes(x = pollutant, y = conc, color = pollutant, fill = pollutant)) + scale_y_log10() + geom_boxplot(aes(fill = factor(pollutant)), alpha = 0.8) + scale_color_pomological() + scale_fill_pomological() + labs(title = &quot;Air monitoring results&quot;) You can even add a calm cream paper background. # Make scatterplot w/ pomo colors and cream background ggplot(data, aes(x = year, y = conc, color = pollutant)) + scale_y_log10() + geom_jitter(size = 2, alpha = 0.6) + scale_color_pomological() + theme_pomological() + labs(title = &quot;Air monitoring results&quot;, subtitle = &quot;2009 - 2013&quot;) Or create a fancy chart in the style of an old fashioned nature journal. library(extrafont) ## Download fancyfont here - https://fonts.google.com/specimen/Homemade+Apple/ ## Add to this folder - &quot;Control Panel\\All Control Panel Items\\Fonts&quot; # Check loaded fonts loadfonts(device = &quot;win&quot;) #windowsFonts() fonts_df &lt;- fonttable() font_import(pattern = &quot;HomemadeApple-Regular&quot;) # Make fancy scatterplot w/ pomo colors, paper background and cursive fonts fancy_plot &lt;- ggplot(data, aes(x = year, y = conc, color = pollutant)) + scale_y_log10() + geom_jitter(size = 2, alpha = 0.3) + scale_color_pomological() + theme_pomological_fancy() + labs(title = &quot;Air monitoring data&quot;, subtitle = &quot;2009 - 2013&quot;) # Create web image paint_pomological(fancy_plot, res = 120) Or create a nice density plot. #devtools::install_github(&quot;yixuan/showtext&quot;) library(showtext) # Get fancy font font_add_google(name = &quot;Homemade Apple&quot;, family = &quot;Homemade Apple&quot;) #font_add_google(name = &quot;Indie Flower&quot;, family = &quot;Indie Flower&quot;) # Create density plot #showtext_begin() #showtext_end() ggplot(data, aes(x = sqrt(conc), fill = pollutant, color = pollutant)) + scale_x_log10() + geom_density(alpha = 0.7) + scale_fill_pomological() + scale_color_pomological() + labs(title = &quot;Air monitoring data&quot;, subtitle = &quot;2009 - 2013&quot;, x = &quot;concentration&quot;) + theme_pomological(&quot;Homemade Apple&quot;) #theme(text = element_text(family = &quot;Homemade Apple&quot;)) Or split up the density plot into separate rows. library(ggridges) # Create fancy_plot fancy_plot &lt;- ggplot(data, aes(x = sqrt(conc), y = forcats::fct_rev(pollutant), fill = pollutant, color = pollutant)) + geom_density_ridges(alpha = 0.7) + theme_pomological(base_family = &#39;Homemade Apple&#39;, base_size = 16, base_theme = ggridges::theme_ridges()) + scale_fill_pomological() + scale_color_pomological() + labs(title = &quot;Air monitoring data&quot;, subtitle = &quot;2009 - 2013&quot;, x = &quot;concentration&quot;, y = &quot;pollutant&quot;) # Create web image paint_pomological(fancy_plot, res = 120) 11.4 Pollution roses Pollution roses are a visual display of pollutant concentrations and wind directions correspnding to those concentrations. The length of each “paddle” is correlated with the percentage of days of valid measurements taken when the wind was blowing from that direction. So if the longest paddle is the one extending downward, then the wind blew from the South on average more times than any other direction for days with valid measurements of a pollutant. The colors on a paddle correspond to the concentration of the pollutant. Blue means lower concentrations up to red which are the highest concentrations. Note that for 24-hour samples, wind direction is the vector averaged wind direction of each hour in a day. Sample R script Click the button below to view an example R script. Show R code This script produces an interactive shiny App for exploring pollutant concentrations in relation to wind direction and speed. pollution_roses = function(data, met_data_filepath, num_breaks = 5) { #Met data must be in Tableau format library(tidyverse) library(lubridate) library(openair) library(reshape) library(shiny) library(rsconnect) data$Date = ymd(data$Date) met_data = read.csv(met_data_filepath) names(met_data)[c(1,8,9)] = c(&quot;Day&quot;,&quot;wd&quot;,&quot;ws&quot;) met_data = mutate(met_data, date = paste0(Year,&quot;/&quot;,Month,&quot;/&quot;,Day,&quot; &quot;,Hour,&quot;:00&quot;)) met_data$date = ymd_hm(met_data$date) met_data = met_data[,-c(1:3,10)] met_data = timeAverage(met_data, avg.time = &quot;day&quot;) met_data$date = ymd(met_data$date) data = left_join(data, met_data, by = c(&quot;Date&quot; = &quot;date&quot;)) Pollutant &lt;- unique(data$Pollutant) Site &lt;- unique(data$AQSID) Year &lt;- unique(data$Year) shinyApp( ui = fluidPage(responsive = FALSE, fluidRow( column(3, style = &quot;padding-bottom: 20px;&quot;, inputPanel( selectInput(&quot;Pollutant&quot;, label=&quot;Choose a pollutant&quot;, choices = Pollutant), selectInput(&quot;Year&quot;, label=&quot;Choose a year&quot;, choices = Year), selectInput(&quot;Site&quot;, label=&quot;Choose a site&quot;, choices = Site))), column(9, plotOutput(&#39;normviz&#39;, height = &quot;500px&quot;)))), server = function(input, output) { output$normviz &lt;- renderPlot({ print(input$Pollutant) print(input$Site) print(input$Year) data_sub = filter(data, Pollutant==input$Pollutant, AQSID == input$Site, Year == input$Year, !is.na(Result)) data_sub = data_sub %&gt;% mutate(MDL = max(MDL), minimum = min(Result), maximum = max(Result), Result = ifelse(Censored, 1e-16, Result)) breaks_site = NULL if(!all(data_sub$Censored)){ breaks_site = c(breaks_site, 0, #c(round_any(data_sub$minimum[1], 0.001, floor), round_any( c(data_sub$MDL[1], data_sub$MDL[1] + (data_sub$maximum[1] - data_sub$MDL[1]) * (1:(num_breaks-1) / (num_breaks-1) ) ), 0.0001, ceiling ) ) pollutionRose(data_sub, statistic = &quot;abs.count&quot;, pollutant = &quot;Result&quot;, breaks = breaks_site, key.footer=&quot;ug/m3&quot;, main=paste(&quot;Daily Average Pollution Rose for&quot;, data_sub$Pollutant[1],&quot;\\n&quot;, data_sub$AQSID[1]) ) } else { breaks_site = c(breaks_site, c(round_any(0, 0.0001, floor), round_any( c(data_sub$MDL[1], 2*data_sub$MDL[1] ), 0.0001, ceiling ) ) ) pollutionRose(data_sub, statistic = &quot;abs.count&quot;, pollutant = &quot;Result&quot;, breaks = breaks_site, key.footer=&quot;ug/m3&quot;, main=paste(&quot;Daily Average Pollution Rose for&quot;, data_sub$Pollutant[1],&quot;\\n&quot;, data_sub$AQSID[1]) ) } }) }) } "]
]
